use std::marker::PhantomData;

use generic_array::sequence::GenericSequence;
use generic_array::{ArrayLength, GenericArray};
use num_integer;
use typenum::Unsigned;

pub struct Combination<Max: Unsigned, Count: ArrayLength<u8> + Unsigned> {
    next: GenericArray<u8, Count>,
    max: PhantomData<Max>,
}

impl<Max: Unsigned, Count: ArrayLength<u8>> Combination<Max, Count> {
    #[inline]
    pub fn new() -> Combination<Max, Count> {
        Combination {
            next: GenericArray::generate(|ndx| ndx as u8),
            max: PhantomData,
        }
    }

    #[inline]
    fn increment(&mut self) {
        for pos in 0.. {
            if pos < Count::USIZE - 1 && self.next[pos] + 1 == self.next[pos + 1] {
                self.next[pos] = pos as u8;
                continue;
            } else {
                self.next[pos] += 1;
                break;
            }
        }
    }

    #[inline]
    pub fn total_count() -> u64 {
        if Count::U64 == 0 {
            0
        } else {
            num_integer::binomial(Max::U64 + 1, Count::U64)
        }
    }
}

impl<Max: Unsigned, Count: ArrayLength<u8>> Iterator for Combination<Max, Count> {
    type Item = GenericArray<u8, Count>;

    #[inline]
    fn next(&mut self) -> Option<GenericArray<u8, Count>> {
        if Count::U64 == 0 || self.next[Count::USIZE - 1] > Max::U8 {
            None
        } else {
            let res = self.next.clone();
            self.increment();
            Some(res)
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::collections::HashSet;
    use typenum::consts::*;

    macro_rules! do_test {
        (
            $max:ident,
            $count:ident,
            $test_count:ident,
            $test_unique:ident,
            $test_increasing:ident,
            $test_sorted:ident,
            $test_valid:ident
        ) => {
            #[test]
            #[allow(non_snake_case)]
            fn $test_count() {
                assert_eq!(
                    Combination::<$max, $count>::total_count(),
                    Combination::<$max, $count>::new().count() as u64
                );
            }

            #[test]
            #[allow(non_snake_case)]
            fn $test_unique() {
                let mut seen = HashSet::new();

                for comb in Combination::<$max, $count>::new() {
                    assert!(seen.insert(comb));
                }
            }

            #[test]
            #[allow(non_snake_case)]
            fn $test_increasing() {
                let mut iter = Combination::<$max, $count>::new();

                if let Some(mut last) = iter.next() {
                    last.reverse();
                    for mut comb in iter {
                        comb.reverse();
                        assert!(comb > last);
                        last = comb;
                    }
                }
            }

            #[test]
            #[allow(non_snake_case)]
            fn $test_sorted() {
                for comb in Combination::<$max, $count>::new() {
                    let mut comb_sorted = comb.clone();
                    comb_sorted.sort();
                    assert_eq!(comb, comb_sorted);
                }
            }

            #[test]
            #[allow(non_snake_case)]
            fn $test_valid() {
                for mut comb in Combination::<$max, $count>::new() {
                    assert!(*comb.iter().max().unwrap() <= $max::U8);
                    assert_eq!(comb.iter().collect::<HashSet<_>>().len(), comb.len());
                }
            }
        };
    }

    do_test!(
        U0,
        U0,
        test_count_u0_u0,
        test_unique_u0_u0,
        test_increasing_u0_u0,
        test_sorted_u0_u0,
        test_valid_u0_u0
    );
    do_test!(
        U0,
        U1,
        test_count_u0_u1,
        test_unique_u0_u1,
        test_increasing_u0_u1,
        test_sorted_u0_u1,
        test_valid_u0_u1
    );
    do_test!(
        U0,
        U2,
        test_count_u0_u2,
        test_unique_u0_u2,
        test_increasing_u0_u2,
        test_sorted_u0_u2,
        test_valid_u0_u2
    );

    do_test!(
        U1,
        U0,
        test_count_u1_u0,
        test_unique_u1_u0,
        test_increasing_u1_u0,
        test_sorted_u1_u0,
        test_valid_u1_u0
    );
    do_test!(
        U1,
        U1,
        test_count_u1_u1,
        test_unique_u1_u1,
        test_increasing_u1_u1,
        test_sorted_u1_u1,
        test_valid_u1_u1
    );
    do_test!(
        U1,
        U2,
        test_count_u1_u2,
        test_unique_u1_u2,
        test_increasing_u1_u2,
        test_sorted_u1_u2,
        test_valid_u1_u2
    );

    do_test!(
        U2,
        U0,
        test_count_u2_u0,
        test_unique_u2_u0,
        test_increasing_u2_u0,
        test_sorted_u2_u0,
        test_valid_u2_u0
    );
    do_test!(
        U2,
        U1,
        test_count_u2_u1,
        test_unique_u2_u1,
        test_increasing_u2_u1,
        test_sorted_u2_u1,
        test_valid_u2_u1
    );
    do_test!(
        U2,
        U2,
        test_count_u2_u2,
        test_unique_u2_u2,
        test_increasing_u2_u2,
        test_sorted_u2_u2,
        test_valid_u2_u2
    );
    do_test!(
        U2,
        U3,
        test_count_u2_u3,
        test_unique_u2_u3,
        test_increasing_u2_u3,
        test_sorted_u2_u3,
        test_valid_u2_u3
    );

    do_test!(
        U3,
        U0,
        test_count_u3_u0,
        test_unique_u3_u0,
        test_increasing_u3_u0,
        test_sorted_u3_u0,
        test_valid_u3_u0
    );
    do_test!(
        U3,
        U1,
        test_count_u3_u1,
        test_unique_u3_u1,
        test_increasing_u3_u1,
        test_sorted_u3_u1,
        test_valid_u3_u1
    );
    do_test!(
        U3,
        U2,
        test_count_u3_u2,
        test_unique_u3_u2,
        test_increasing_u3_u2,
        test_sorted_u3_u2,
        test_valid_u3_u2
    );
    do_test!(
        U3,
        U3,
        test_count_u3_u3,
        test_unique_u3_u3,
        test_increasing_u3_u3,
        test_sorted_u3_u3,
        test_valid_u3_u3
    );
    do_test!(
        U3,
        U4,
        test_count_u3_u4,
        test_unique_u3_u4,
        test_increasing_u3_u4,
        test_sorted_u3_u4,
        test_valid_u3_u4
    );

    do_test!(
        U4,
        U0,
        test_count_u4_u0,
        test_unique_u4_u0,
        test_increasing_u4_u0,
        test_sorted_u4_u0,
        test_valid_u4_u0
    );
    do_test!(
        U4,
        U1,
        test_count_u4_u1,
        test_unique_u4_u1,
        test_increasing_u4_u1,
        test_sorted_u4_u1,
        test_valid_u4_u1
    );
    do_test!(
        U4,
        U2,
        test_count_u4_u2,
        test_unique_u4_u2,
        test_increasing_u4_u2,
        test_sorted_u4_u2,
        test_valid_u4_u2
    );
    do_test!(
        U4,
        U3,
        test_count_u4_u3,
        test_unique_u4_u3,
        test_increasing_u4_u3,
        test_sorted_u4_u3,
        test_valid_u4_u3
    );
    do_test!(
        U4,
        U4,
        test_count_u4_u4,
        test_unique_u4_u4,
        test_increasing_u4_u4,
        test_sorted_u4_u4,
        test_valid_u4_u4
    );
    do_test!(
        U4,
        U5,
        test_count_u4_u5,
        test_unique_u4_u5,
        test_increasing_u4_u5,
        test_sorted_u4_u5,
        test_valid_u4_u5
    );

    do_test!(
        U5,
        U0,
        test_count_u5_u0,
        test_unique_u5_u0,
        test_increasing_u5_u0,
        test_sorted_u5_u0,
        test_valid_u5_u0
    );
    do_test!(
        U5,
        U1,
        test_count_u5_u1,
        test_unique_u5_u1,
        test_increasing_u5_u1,
        test_sorted_u5_u1,
        test_valid_u5_u1
    );
    do_test!(
        U5,
        U2,
        test_count_u5_u2,
        test_unique_u5_u2,
        test_increasing_u5_u2,
        test_sorted_u5_u2,
        test_valid_u5_u2
    );
    do_test!(
        U5,
        U3,
        test_count_u5_u3,
        test_unique_u5_u3,
        test_increasing_u5_u3,
        test_sorted_u5_u3,
        test_valid_u5_u3
    );
    do_test!(
        U5,
        U4,
        test_count_u5_u4,
        test_unique_u5_u4,
        test_increasing_u5_u4,
        test_sorted_u5_u4,
        test_valid_u5_u4
    );
    do_test!(
        U5,
        U5,
        test_count_u5_u5,
        test_unique_u5_u5,
        test_increasing_u5_u5,
        test_sorted_u5_u5,
        test_valid_u5_u5
    );
    do_test!(
        U5,
        U6,
        test_count_u5_u6,
        test_unique_u5_u6,
        test_increasing_u5_u6,
        test_sorted_u5_u6,
        test_valid_u5_u6
    );

    do_test!(
        U6,
        U0,
        test_count_u6_u0,
        test_unique_u6_u0,
        test_increasing_u6_u0,
        test_sorted_u6_u0,
        test_valid_u6_u0
    );
    do_test!(
        U6,
        U1,
        test_count_u6_u1,
        test_unique_u6_u1,
        test_increasing_u6_u1,
        test_sorted_u6_u1,
        test_valid_u6_u1
    );
    do_test!(
        U6,
        U2,
        test_count_u6_u2,
        test_unique_u6_u2,
        test_increasing_u6_u2,
        test_sorted_u6_u2,
        test_valid_u6_u2
    );
    do_test!(
        U6,
        U3,
        test_count_u6_u3,
        test_unique_u6_u3,
        test_increasing_u6_u3,
        test_sorted_u6_u3,
        test_valid_u6_u3
    );
    do_test!(
        U6,
        U4,
        test_count_u6_u4,
        test_unique_u6_u4,
        test_increasing_u6_u4,
        test_sorted_u6_u4,
        test_valid_u6_u4
    );
    do_test!(
        U6,
        U5,
        test_count_u6_u5,
        test_unique_u6_u5,
        test_increasing_u6_u5,
        test_sorted_u6_u5,
        test_valid_u6_u5
    );
    do_test!(
        U6,
        U6,
        test_count_u6_u6,
        test_unique_u6_u6,
        test_increasing_u6_u6,
        test_sorted_u6_u6,
        test_valid_u6_u6
    );
    do_test!(
        U6,
        U7,
        test_count_u6_u7,
        test_unique_u6_u7,
        test_increasing_u6_u7,
        test_sorted_u6_u7,
        test_valid_u6_u7
    );

    do_test!(
        U7,
        U0,
        test_count_u7_u0,
        test_unique_u7_u0,
        test_increasing_u7_u0,
        test_sorted_u7_u0,
        test_valid_u7_u0
    );
    do_test!(
        U7,
        U1,
        test_count_u7_u1,
        test_unique_u7_u1,
        test_increasing_u7_u1,
        test_sorted_u7_u1,
        test_valid_u7_u1
    );
    do_test!(
        U7,
        U2,
        test_count_u7_u2,
        test_unique_u7_u2,
        test_increasing_u7_u2,
        test_sorted_u7_u2,
        test_valid_u7_u2
    );
    do_test!(
        U7,
        U3,
        test_count_u7_u3,
        test_unique_u7_u3,
        test_increasing_u7_u3,
        test_sorted_u7_u3,
        test_valid_u7_u3
    );
    do_test!(
        U7,
        U4,
        test_count_u7_u4,
        test_unique_u7_u4,
        test_increasing_u7_u4,
        test_sorted_u7_u4,
        test_valid_u7_u4
    );
    do_test!(
        U7,
        U5,
        test_count_u7_u5,
        test_unique_u7_u5,
        test_increasing_u7_u5,
        test_sorted_u7_u5,
        test_valid_u7_u5
    );
    do_test!(
        U7,
        U6,
        test_count_u7_u6,
        test_unique_u7_u6,
        test_increasing_u7_u6,
        test_sorted_u7_u6,
        test_valid_u7_u6
    );
    do_test!(
        U7,
        U7,
        test_count_u7_u7,
        test_unique_u7_u7,
        test_increasing_u7_u7,
        test_sorted_u7_u7,
        test_valid_u7_u7
    );
    do_test!(
        U7,
        U8,
        test_count_u7_u8,
        test_unique_u7_u8,
        test_increasing_u7_u8,
        test_sorted_u7_u8,
        test_valid_u7_u8
    );

    do_test!(
        U8,
        U0,
        test_count_u8_u0,
        test_unique_u8_u0,
        test_increasing_u8_u0,
        test_sorted_u8_u0,
        test_valid_u8_u0
    );
    do_test!(
        U8,
        U1,
        test_count_u8_u1,
        test_unique_u8_u1,
        test_increasing_u8_u1,
        test_sorted_u8_u1,
        test_valid_u8_u1
    );
    do_test!(
        U8,
        U2,
        test_count_u8_u2,
        test_unique_u8_u2,
        test_increasing_u8_u2,
        test_sorted_u8_u2,
        test_valid_u8_u2
    );
    do_test!(
        U8,
        U3,
        test_count_u8_u3,
        test_unique_u8_u3,
        test_increasing_u8_u3,
        test_sorted_u8_u3,
        test_valid_u8_u3
    );
    do_test!(
        U8,
        U4,
        test_count_u8_u4,
        test_unique_u8_u4,
        test_increasing_u8_u4,
        test_sorted_u8_u4,
        test_valid_u8_u4
    );
    do_test!(
        U8,
        U5,
        test_count_u8_u5,
        test_unique_u8_u5,
        test_increasing_u8_u5,
        test_sorted_u8_u5,
        test_valid_u8_u5
    );
    do_test!(
        U8,
        U6,
        test_count_u8_u6,
        test_unique_u8_u6,
        test_increasing_u8_u6,
        test_sorted_u8_u6,
        test_valid_u8_u6
    );
    do_test!(
        U8,
        U7,
        test_count_u8_u7,
        test_unique_u8_u7,
        test_increasing_u8_u7,
        test_sorted_u8_u7,
        test_valid_u8_u7
    );
    do_test!(
        U8,
        U8,
        test_count_u8_u8,
        test_unique_u8_u8,
        test_increasing_u8_u8,
        test_sorted_u8_u8,
        test_valid_u8_u8
    );
    do_test!(
        U8,
        U9,
        test_count_u8_u9,
        test_unique_u8_u9,
        test_increasing_u8_u9,
        test_sorted_u8_u9,
        test_valid_u8_u9
    );

    do_test!(
        U9,
        U0,
        test_count_u9_u0,
        test_unique_u9_u0,
        test_increasing_u9_u0,
        test_sorted_u9_u0,
        test_valid_u9_u0
    );
    do_test!(
        U9,
        U1,
        test_count_u9_u1,
        test_unique_u9_u1,
        test_increasing_u9_u1,
        test_sorted_u9_u1,
        test_valid_u9_u1
    );
    do_test!(
        U9,
        U2,
        test_count_u9_u2,
        test_unique_u9_u2,
        test_increasing_u9_u2,
        test_sorted_u9_u2,
        test_valid_u9_u2
    );
    do_test!(
        U9,
        U3,
        test_count_u9_u3,
        test_unique_u9_u3,
        test_increasing_u9_u3,
        test_sorted_u9_u3,
        test_valid_u9_u3
    );
    do_test!(
        U9,
        U4,
        test_count_u9_u4,
        test_unique_u9_u4,
        test_increasing_u9_u4,
        test_sorted_u9_u4,
        test_valid_u9_u4
    );
    do_test!(
        U9,
        U5,
        test_count_u9_u5,
        test_unique_u9_u5,
        test_increasing_u9_u5,
        test_sorted_u9_u5,
        test_valid_u9_u5
    );
    do_test!(
        U9,
        U6,
        test_count_u9_u6,
        test_unique_u9_u6,
        test_increasing_u9_u6,
        test_sorted_u9_u6,
        test_valid_u9_u6
    );
    do_test!(
        U9,
        U7,
        test_count_u9_u7,
        test_unique_u9_u7,
        test_increasing_u9_u7,
        test_sorted_u9_u7,
        test_valid_u9_u7
    );
    do_test!(
        U9,
        U8,
        test_count_u9_u8,
        test_unique_u9_u8,
        test_increasing_u9_u8,
        test_sorted_u9_u8,
        test_valid_u9_u8
    );
    do_test!(
        U9,
        U9,
        test_count_u9_u9,
        test_unique_u9_u9,
        test_increasing_u9_u9,
        test_sorted_u9_u9,
        test_valid_u9_u9
    );
    do_test!(
        U9,
        U10,
        test_count_u9_u10,
        test_unique_u9_u10,
        test_increasing_u9_u10,
        test_sorted_u9_u10,
        test_valid_u9_u10
    );

    do_test!(
        U10,
        U0,
        test_count_u10_u0,
        test_unique_u10_u0,
        test_increasing_u10_u0,
        test_sorted_u10_u0,
        test_valid_u10_u0
    );
    do_test!(
        U10,
        U1,
        test_count_u10_u1,
        test_unique_u10_u1,
        test_increasing_u10_u1,
        test_sorted_u10_u1,
        test_valid_u10_u1
    );
    do_test!(
        U10,
        U2,
        test_count_u10_u2,
        test_unique_u10_u2,
        test_increasing_u10_u2,
        test_sorted_u10_u2,
        test_valid_u10_u2
    );
    do_test!(
        U10,
        U3,
        test_count_u10_u3,
        test_unique_u10_u3,
        test_increasing_u10_u3,
        test_sorted_u10_u3,
        test_valid_u10_u3
    );
    do_test!(
        U10,
        U4,
        test_count_u10_u4,
        test_unique_u10_u4,
        test_increasing_u10_u4,
        test_sorted_u10_u4,
        test_valid_u10_u4
    );
    do_test!(
        U10,
        U5,
        test_count_u10_u5,
        test_unique_u10_u5,
        test_increasing_u10_u5,
        test_sorted_u10_u5,
        test_valid_u10_u5
    );
    do_test!(
        U10,
        U6,
        test_count_u10_u6,
        test_unique_u10_u6,
        test_increasing_u10_u6,
        test_sorted_u10_u6,
        test_valid_u10_u6
    );
    do_test!(
        U10,
        U7,
        test_count_u10_u7,
        test_unique_u10_u7,
        test_increasing_u10_u7,
        test_sorted_u10_u7,
        test_valid_u10_u7
    );
    do_test!(
        U10,
        U8,
        test_count_u10_u8,
        test_unique_u10_u8,
        test_increasing_u10_u8,
        test_sorted_u10_u8,
        test_valid_u10_u8
    );
    do_test!(
        U10,
        U9,
        test_count_u10_u9,
        test_unique_u10_u9,
        test_increasing_u10_u9,
        test_sorted_u10_u9,
        test_valid_u10_u9
    );
    do_test!(
        U10,
        U10,
        test_count_u10_u10,
        test_unique_u10_u10,
        test_increasing_u10_u10,
        test_sorted_u10_u10,
        test_valid_u10_u10
    );
    do_test!(
        U10,
        U11,
        test_count_u10_u11,
        test_unique_u10_u11,
        test_increasing_u10_u11,
        test_sorted_u10_u11,
        test_valid_u10_u11
    );
}
